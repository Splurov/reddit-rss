"use strict";

var buildApi = require('../buildApi')
, fs = require('fs')
, path = require('path')
, cheerio = require('cheerio')
, nodefn = require('when/node/function')
, chai = require('chai')
, chaiAsPromised = require('chai-as-promised')
, expect = chai.expect;

chai.Should();
chai.use(chaiAsPromised);
require("mocha-as-promised")();

/* global describe */
/* global it */
/* global before */
/* global beforeEach */
/* global after */

describe('buildApi', function() {

	var $ // cheerio object
	, endpoints = {}
	, redditApi = path.join(__dirname, 'redditApi.html');

	// Download a local copy of the reddit API
	before(function() {
		this.timeout = 5000;
		return buildApi._test.getRedditHtml().then(function(html) {
			return nodefn.call(fs.writeFile, redditApi, html);
		});
	});

	after(function() {
		return nodefn.call(fs.unlink, redditApi);
	});

	// reload the cheerio object ($) before each test
	beforeEach(function() {
		return nodefn.call(fs.readFile, redditApi, {encoding: 'utf8'})
		.then(function(redditHtml) {
			$ = cheerio.load(redditHtml);

			endpoints = {};

			endpoints.mejson = $('#GET_api_me\\.json').clone();

			endpoints.oauthIdentity = $('#GET_api_v1_me').clone();
			endpoints.oauthNone = $('#POST_api_update').clone();

			endpoints.hasExtensions = $('#GET_subreddits_search').clone();
			endpoints.noExtensions = $('#GET_api_v1_me').clone();

			endpoints.urlHTTPS = $('#POST_api_update').clone();
			endpoints.urlHTTP = $('#GET_api_v1_me').clone();

			endpoints.hasDescription = $('#GET_api_v1_me').clone();
			endpoints.noDescription = $('#POST_api_setflairenabled').clone();

			endpoints.hasArgs = $('#POST_api_login').clone();
			endpoints.hasArgsModhash = $('#POST_api_delete_user').clone();
			endpoints.noArgs = $('#GET_api_v1_me').clone();

			endpoints.methodPOST = $('#POST_api_update').clone();
			endpoints.methodGET = $('#GET_api_v1_me').clone();
			endpoints.methodDELETE =
				$('#DELETE_api_multi_\\{multipath\\}_r_\\{srname\\}').clone();
			endpoints.methodPUT =
				$('#PUT_api_multi_\\{multipath\\}_description').clone();

			endpoints.pathPlain = $('#GET_api_v1_me').clone();
			endpoints.pathVariables =
				$('#PUT_api_multi_\\{multipath\\}_description').clone();
			endpoints.pathBrackets = $('#GET_search').clone();
		});
	});


	describe('#getEndpointOauth()', function() {

		it('should detect oauth', function() {
			buildApi._test.getEndpointOauth($, endpoints.oauthIdentity)
				.should.eql([ 'identity' ]);
		});

		it('should not detect oauth', function() {
			buildApi._test.getEndpointOauth($, endpoints.oauthNone)
				.should.eql([]);
		});

	});

	describe('#getEndpointExtensions()', function() {

		it('should find extensions', function() {
			buildApi._test
				.getEndpointExtensions($, endpoints.hasExtensions)
				.should.eql([ '.json', '.xml' ]);
		});

		it('should not find extensions', function() {
			buildApi._test
				.getEndpointExtensions($, endpoints.noExtensions)
				.should.eql([]);
		});

	});

	describe('#getEndpointUrl()', function() {

		it('should use https', function() {
			buildApi._test.getEndpointUrl('POST', '/foo')
				.should.eql({
					standard: 'https://ssl.reddit.com/foo'
				});
		});

		it('should not use https', function() {
			buildApi._test.getEndpointUrl('GET', '/foo')
				.should.eql({
					standard: 'http://www.reddit.com/foo'
				});
		});

		it('should use Oauth & http', function() {
			buildApi._test.getEndpointUrl('GET', '/foo', [ 'identity' ])
				.should.eql({
					standard: 'http://www.reddit.com/foo',
					oauth: 'https://oauth.reddit.com/foo'
				});
		});

		it('should use Oauth & https', function() {
			buildApi._test.getEndpointUrl('PUT', '/foo', [ 'identity' ])
				.should.eql({
					standard: 'https://ssl.reddit.com/foo',
					oauth: 'https://oauth.reddit.com/foo'
				});
		});

	});

	describe('#getEndpointDescription()', function() {

		it('should get a description', function() {
			buildApi._test
				.getEndpointDescription($, endpoints.hasDescription)
				.should.equal('Returns the identity of the user ' +
					'currently authenticated via OAuth.');
		});

		it('should not get a description', function() {
			buildApi._test
				.getEndpointDescription($, endpoints.noDescription)
				.should.equal('');
		});


	});

	describe('#getEndpointArgs()', function() {

		it('should have arguments', function() {
			buildApi._test.getEndpointArgs($, endpoints.hasArgs)
				.should.eql({
					api_type: {
						describe: 'the string json'
					},
					passwd: {
						describe: "the user's password"
					},
					rem: {
						describe: 'boolean value'
					},
					user: {
						describe: 'a username'
					}
				});
		});

		it('should deal with the modhash parameter', function() {
			buildApi._test.getEndpointArgs($, endpoints.hasArgsModhash)
				.uh.should.be.ok;
		});

		it('should not have arguments', function() {
			buildApi._test.getEndpointArgs($, endpoints.noArgs)
				.should.eql({});
		});

	});

	describe('#getEndpointMethod()', function() {

		it('should have method POST', function() {
			buildApi._test.getEndpointMethod($, endpoints.methodPOST)
				.should.equal('POST');
		});

		it('should have method GET', function() {
			buildApi._test.getEndpointMethod($, endpoints.methodGET)
				.should.equal('GET');
		});

		it('should have method DELETE', function() {
			buildApi._test.getEndpointMethod($, endpoints.methodDELETE)
				.should.equal('DELETE');
		});

		it('should have method PUT', function() {
			buildApi._test.getEndpointMethod($, endpoints.methodPUT)
				.should.equal('PUT');
		});

	});

	describe('#getEndpointPaths()', function() {

		it('should handle paths', function() {
			buildApi._test.getEndpointPaths($, endpoints.pathPlain)
				.should.eql(['/api/v1/me']);
		});

		it('should handle paths with variables', function() {
			buildApi._test.getEndpointPaths($, endpoints.pathVariables)
				.should.eql(['/api/multi/$multipath/description']);
		});

		it('should handle paths with brackets', function() {
			buildApi._test.getEndpointPaths($, endpoints.pathBrackets)
				.should.eql([
					'/search',
					'/r/$subreddit/search'
				]);
		});

	});

	describe('#getEndpointDetails()', function() {

		it('should get details (oauthUrl)', function() {
			buildApi._test.getEndpointDetails($, endpoints.noArgs)
				.should.eql([{
					oauth: [ 'identity'],
					extensions: [],
					method: 'GET',
					path: '/api/v1/me',
					url: {
						oauth: 'https://oauth.reddit.com/api/v1/me',
						standard: 'http://www.reddit.com/api/v1/me'
					},
					describe: 'Returns the identity of the user currently authenticated via OAuth.',
					args: {}
				}]);
		});

		it('should get details (no oauthUrl)', function() {
			buildApi._test.getEndpointDetails($, endpoints.mejson)
				.should.eql([{
					oauth: [],
					extensions: [],
					method: 'GET',
					path: '/api/me.json',
					url: {
						standard: 'http://www.reddit.com/api/me.json'
					},
					describe: "Get info about the currently authenticated " +
						"user.\n\n" +
						"Response includes a modhash, karma, and new mail " +
						"status.",
					args: {}
				}]);
		});

	});

	describe('#setNodeValue()', function() {

		it('should traverse and set a node value', function() {
			var foo = {};
			buildApi._test.setNodeValue(foo, 'hi', [ 'bar', 'baz' ]);
			foo.bar.baz.should.equal('hi');
		});

		it('should set additional json & xml values', function() {
			var foo = {};
			buildApi._test.setNodeValue(foo, 'hi', [ 'bar', 'baz' ]);

			expect(foo.bar.baz.json).to.be.undefined;

			foo.json.path.should.equal('/.json');

			foo.bar.json.path.should.equal('/bar/.json');
			foo.bar.xml.path.should.equal('/bar/.xml');
		});

		it('should not set additional json & xml values under disallowed endpoints', function() {
			var foo = {};
			buildApi._test.setNodeValue(foo, 'hi', [ 'api', 'bar' ]);

			expect(foo.api.json).to.be.undefined;
			expect(foo.api.xml).to.be.undefined;
		});

	});


	describe('#getEndpoints()', function() {
		it('should', function() {
			var endpoints = buildApi._test.getEndpoints($);

			// @TODO check for the # of endpoints  to catch changes
			// more easily
			endpoints.should.be.ok;
		});

	});

	describe('#getRedditHtml()', function() {

		// SKIP - it basically works because the other tests work.
		// We can test this if we want, but we would have to hit the
		// API page twice.
		it.skip('should get the reddit dev html', function() {

		});

	});

});
